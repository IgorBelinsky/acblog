name: CD

on:
  repository_dispatch:
    types: [cd]

defaults:
  run:
    shell: pwsh

env:
  dotnet-version: "3.1.x"
  node-version: "12.x"
  build_version: "0.0.1.${{ github.run_number }}-preview"

jobs:
  pub-images:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.dotnet-version }}
    - name: Setup NodeJS
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.node-version }}
    - name: Install dev deps
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.AZ_TOKEN }}
      run: pwsh -c ./tools.ps1 dev-deps
    - name: Restore
      run: pwsh -c ./tools.ps1 restore
    - name: Build
      run: dotnet build -c Release /p:Version=${env:build_version}
    - name: Generate build status
      run: |
        cd src/AcBlog.Client.WebAssembly.Host
        if (!$?) { exit 1 }
        echo "{ ""Build"": { ""Commit"": ""$env:GITHUB_SHA"", ""Branch"": ""$env:GITHUB_REF"", ""BuildDate"": ""$(date)"", ""Repository"": ""$env:GITHUB_REPOSITORY"" } }" > ./build.json
        if (!$?) { exit 1 }
    - name: Publish Client.WebAssembly
      run: |
        cd src/AcBlog.Client.WebAssembly
        if (!$?) { exit 1 }
        echo "{ ""Build"": { ""Commit"": ""$env:GITHUB_SHA"", ""Branch"": ""$env:GITHUB_REF"", ""BuildDate"": ""$(date)"", ""Repository"": ""$env:GITHUB_REPOSITORY"" } }" > ./wwwroot/build.json
        if (!$?) { exit 1 }
        mkdir publish
        if (!$?) { exit 1 }
        dotnet publish -c Release -o ./publish
        if (!$?) { exit 1 }
    - name: Upload artifacts
      uses: actions/upload-artifact@master
      with:
        name: wasm
        path: ./src/AcBlog.Client.WebAssembly/publish
    - name: Push Client.WebAssembly image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: acblog/wasm
        tag_with_ref: true
        dockerfile: ./src/AcBlog.Client.WebAssembly/Dockerfile
    - name: Push Client.WebAssembly.Host image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: acblog/wasm-host
        tag_with_ref: true
        dockerfile: ./src/AcBlog.Client.WebAssembly.Host/Dockerfile
    - name: Push Server.API image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: acblog/api
        tag_with_ref: true
        dockerfile: ./src/AcBlog.Server.API/Dockerfile
  pub-pkgs:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.dotnet-version }}
    - name: Setup NodeJS
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.node-version }}
    - name: Install dev deps
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.AZ_TOKEN }}
      run: pwsh -c ./tools.ps1 dev-deps
    - name: Restore
      run: pwsh -c ./tools.ps1 restore
    - name: Build
      run: dotnet build -c Release /p:Version=${env:build_version}
    - name: Pack
      run: pwsh -c ./tools.ps1 pack
    - name: Upload artifacts
      uses: actions/upload-artifact@master
      with:
        name: packages
        path: ./packages
    - name: Deploy
      run: |
        dotnet nuget push ./packages/AcBlog.Data.$env:build_version.nupkg -s aza -k az
        if (!$?) { exit 1 }
        dotnet nuget push ./packages/AcBlog.Data.Documents.$env:build_version.nupkg -s aza -k az
        if (!$?) { exit 1 }
        dotnet nuget push ./packages/AcBlog.Data.Repositories.FileSystem.$env:build_version.nupkg -s aza -k az
        if (!$?) { exit 1 }
        dotnet nuget push ./packages/AcBlog.Data.Repositories.SQLServer.$env:build_version.nupkg -s aza -k az
        if (!$?) { exit 1 }
        dotnet nuget push ./packages/AcBlog.SDK.$env:build_version.nupkg -s aza -k az
        if (!$?) { exit 1 }
        dotnet nuget push ./packages/AcBlog.Tools.SDK.$env:build_version.nupkg -s aza -k az
        if (!$?) { exit 1 }
        dotnet nuget push ./packages/AcBlog.Tools.StaticGenerator.$env:build_version.nupkg -s aza -k az
        if (!$?) { exit 1 }
  invoke-repo-update:
    needs: [pub-images, pub-pkgs]
    strategy:
      matrix:
        repo: ['acblog/mirrors', 'acblog/acblog.github.io', 'acblog/cdn']
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.PA_TOKEN }}
          repository: ${{ matrix.repo }}
          event-type: update
