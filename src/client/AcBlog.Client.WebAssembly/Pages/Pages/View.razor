@page "/pages/view/{route}"

@inherits BasePagePage
@inject AcBlog.Sdk.Filters.PageRouteFilter Routes
@using AcBlog.Client.WebAssembly.Components.Renderers

<Loader OnLoad="@OnLoad" OnLoaded="@OnLoaded" AutoLoad="@false" @ref="loader">
    <ChildContent>
        <PageHeader>
            <PageHeaderTitle>
                @Page.Title
            </PageHeaderTitle>
            <PageHeaderBreadcrumb>
                <Breadcrumb>
                    <BreadcrumbItem>
                        <a href="">
                            <MdiIcon Type="home" />
                            <span>Home</span>
                        </a>
                    </BreadcrumbItem>
                    <BreadcrumbItem>
                        <a href="pages">
                            <MdiIcon Type="book-open" />
                            <span>Pages</span>
                        </a>
                    </BreadcrumbItem>
                    <BreadcrumbItem>
                        <span>@Page.Id</span>
                    </BreadcrumbItem>
                </Breadcrumb>
            </PageHeaderBreadcrumb>
        </PageHeader>

        @((MarkupString)Page.Body)
    </ChildContent>

    <FailingContent>
        <Result Status="404"
                Title=@("Not Found")
                SubTitle=@("Sorry, the page you visited does not exist.") />
    </FailingContent>
</Loader>

@code {
    [Parameter]
    public string Route { get; set; }

    private Loader loader;

    private Page Page { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine($"Route {Route}");
        await loader.Load();
    }

    private Task OnLoaded()
    {
        if (Page is null)
        {
            Title = "Loading...";
        }
        else
        {
            Title = Page.Title;
        }
        return Task.CompletedTask;
    }

    private async Task OnLoad()
    {
        var pages = await Routes.Filter(Route, null);
        var id = pages.Results.First();
        Page = await Service.PageService.Get(id);
    }
}
