@page "/posts/create"
@page "/posts/create/{createType}"
@page "/posts/{id}/edit"
@attribute [Authorize]
@inherits BasePostPage
@inject MessageService MessageService
@using OneOf

<Loader OnLoad="@OnLoad">
    <PageContainer Title="@(IsCreate ? "Create Post" : "Edit Post")" PageTitle="@Title">
        <Breadcrumb>
            <Breadcrumb>
                <BreadcrumbItem>
                    <a href="">
                        <MdiIcon Type="@IconNames.Home" />
                        <span>Home</span>
                    </a>
                </BreadcrumbItem>
                <BreadcrumbItem>
                    <a href="@UrlGenerator.Posts()">
                        <MdiIcon Type="@IconNames.Posts" />
                        <span>Posts</span>
                    </a>
                </BreadcrumbItem>
                @if (!IsCreate)
                {
                    <BreadcrumbItem>
                        <a href="@UrlGenerator.Post(Target)">
                            <span>@Target.Id</span>
                        </a>
                    </BreadcrumbItem>
                    <BreadcrumbItem>
                        <span>Edit</span>
                    </BreadcrumbItem>
                }
                else
                {
                    <BreadcrumbItem>
                        <span>Create</span>
                    </BreadcrumbItem>
                }
            </Breadcrumb>
        </Breadcrumb>
        <ChildContent>
            <Form Model="@model"
                  OnFinish="OnSubmit">
                <FormItem Label="Title">
                    <Input @bind-Value="@context.Title" />
                </FormItem>
                <FormItem Label="Type">
                    <RadioGroup @bind-Value="@context.Type">
                        <Radio RadioButton Value="@(PostType.Article)">Article</Radio>
                        <Radio RadioButton Value="@(PostType.Slides)">Slides</Radio>
                        <Radio RadioButton Value="@(PostType.Note)">Note</Radio>
                    </RadioGroup>
                </FormItem>
                <FormItem Label="Category">
                    <Input Placeholder="Input as a/b/c." @bind-Value="@context.CategoryString" />
                </FormItem>
                <FormItem Label="Keywords">
                    <Input Placeholder="Input as a;b;c." @bind-Value="@context.KeywordsString" />
                </FormItem>
                <FormItem Label="Content">
                    <TextArea @bind-Value="@context.Content.Raw" AutoSize="@true" MinRows="10"></TextArea>
                </FormItem>
                <FormItem>
                    <Button Type="@ButtonType.Primary" HtmlType="submit">
                        @if (IsCreate)
                        {
                            <span>Create</span>
                        }
                        else
                        {
                            <span>Update</span>
                        }
                    </Button>
                </FormItem>
            </Form>
        </ChildContent>
    </PageContainer>

</Loader>

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string CreateType { get; set; }

    class Model
    {
        public PostType Type { get; set; } = PostType.Article;

        public string Author { get; set; } = string.Empty;

        public Document Content { get; set; } = new Document();

        [Required]
        public string Title { get; set; } = string.Empty;

        public string CategoryString { get; set; }

        public string KeywordsString { get; set; }
    }

    private Model model;

    private Post Target { get; set; }

    private bool IsCreate { get; set; }

    private async Task OnLoad()
    {
        Title = "Loading...";
        if (string.IsNullOrWhiteSpace(Id))
        {
            Target = new Post();
            Target.Type = CreateType switch
            {
                "article" => PostType.Article,
                "slides" => PostType.Slides,
                "note" => PostType.Note,
                _ => PostType.Article
            };
            IsCreate = true;
            Title = "New";
        }
        else
        {
            Target = await Service.PostService.Get(Id);
            IsCreate = false;
            Title = "Edit";
        }
        model = new Model
        {
            Author = Target.Author,
            Content = Target.Content,
            Title = Target.Title,
            Type = Target.Type,
            CategoryString = Target.Category.ToString(),
            KeywordsString = Target.Keywords.ToString(),
        };
    }

    private void ModelToTarget()
    {
        Target.Author = model.Author;
        Target.Category = Category.Parse(model.CategoryString);
        Target.Keywords = Keyword.Parse(model.KeywordsString);
        Target.Title = model.Title;
        Target.Content = model.Content;
        Target.Type = model.Type;
    }

    async Task OnSubmit()
    {
        try
        {
            ModelToTarget();
        }
        catch
        {
            _ = MessageService.Error("Invalid input.");
            return;
        }
        Target.ModificationTime = DateTimeOffset.Now;

        if (IsCreate)
        {
            Target.CreationTime = DateTimeOffset.Now;
            var id = await Service.PostService.Create(Target);
            if (id is not null)
            {
                _ = MessageService.Success("Created post successfully.");
                NavigationManager.NavigateTo($"posts/{Uri.EscapeDataString(id)}");
            }
            else
            {
                _ = MessageService.Error("Failed to create post.");
            }
        }
        else
        {
            var pass = await Service.PostService.Update(Target);
            if (pass)
            {
                _ = MessageService.Success("Updated post successfully.");
                NavigationManager.NavigateTo($"posts/{Uri.EscapeDataString(Target.Id)}");
            }
            else
            {
                _ = MessageService.Error("Failed to update post.");
            }
        }
    }
}
