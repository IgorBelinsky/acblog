@page "/posts/{id}"
@inherits BasePostPage
@using AcBlog.Client.WebAssembly.Components.Renderers

<Loader OnLoad="@OnLoad" OnLoaded="@OnLoaded">
    @if (IsProtected)
    {
        <div class="container">
            <div class="d-flex flex-row justify-content-between">
                <h1 class="display-4">Protected Post</h1>
                <AuthorizeView>
                    <Authorized>
                        <div class="btn-group-toggle btn-group-lg btn-group my-auto" role="group">
                            <a class="btn btn-primary mdi mdi-square-edit-outline" href="posts/@Id/edit">Edit</a>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
            <button type="button" class="btn btn-primary mt-3" style="width: 100%;" @onclick="@OnDeprotectClick">Deprotect</button>
        </div>

        <InputPasswordModal @ref="inputPasswordModal" OnPasswordSubmit="@OnPasswordSubmit"></InputPasswordModal>
    }
    else
    {
        <div class="row">
            <div class="container">
                <div class="d-flex flex-row justify-content-between">
                    <h1 class="display-4">@Post.Title</h1>
                    <AuthorizeView>
                        <Authorized>
                            <div class="btn-group-toggle btn-group-lg btn-group my-auto" role="group">
                                <a class="btn btn-primary mdi mdi-square-edit-outline" href="posts/@Id/edit">Edit</a>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                </div>
                <PostMetadataDisplay Value="@Post" />
            </div>
        </div>

        <div class="row mt-3">
            @switch (Post.Type)
            {
                case PostType.Article:
                case PostType.Note:
                    @*
                        <div class="col-2 border-right">
                            <div id="post-toc">

                            </div>
                        </div>
                        <div class="col-10">
                            <div class="ml-1">
                                <ArticleRenderer Document="@Post.Content" TocElementId="post-toc" />
                            </div>
                        </div>
                    *@
                    <div class="container">
                        <div>
                            <ArticleRenderer Document="@Post.Content"></ArticleRenderer>
                        </div>
                    </div>
                    break;
                case PostType.Slides:
                    <div class="container">
                        <div>
                            <SlidesRenderer Document="@Post.Content" Style="@SlidesStyle"></SlidesRenderer>
                        </div>
                        <button type="button" class="btn btn-primary mt-2" style="width: 100%;" @onclick="@OnFullViewClick">Full View</button>
                    </div>
                    break;
                default:
                    break;
            }
        </div>
    }
</Loader>

@code {
    [Parameter]
    public string Id { get; set; }

    private Post Post { get; set; }

    private bool IsProtected { get; set; } = false;

    private InputPasswordModal inputPasswordModal;

    private string SlidesStyle { get; set; } = "border: 0; height: 500px; width: 100%";

    private async Task OnLoaded()
    {
        if (Post is null)
        {
            Title = "Loading...";
        }
        else
        {
            if (IsProtected)
            {
                Title = "Protected Post";
                await inputPasswordModal.Show();
            }
            else
            {
                Title = Post.Title;
            }
        }
    }

    private async Task OnLoad()
    {
        Post = await Service.PostService.Get(Id);
        IsProtected = await Service.PostService.Protector.IsProtected(Post.Content);
    }

    private async Task OnPasswordSubmit(string password)
    {
        try
        {
            Document dep = await Service.PostService.Protector.Deprotect(Post.Content, new Data.Protections.ProtectionKey
            {
                Password = password
            });
            Post.Content = dep;
            IsProtected = await Service.PostService.Protector.IsProtected(Post.Content);
            if (!IsProtected)
                await inputPasswordModal.Hide();
        }
        catch
        {
            throw new WrongPasswordException();
        }
    }

    private async Task OnDeprotectClick()
    {
        await inputPasswordModal.Show();
    }

    private Task OnFullViewClick()
    {
        SlidesStyle = "left: 0; right: 0; top: 0; bottom: 0; margin:0; border:0; position: absolute; height: 100%; width:100%; z-index: 500;";
        return Task.CompletedTask;
    }
}
