@page "/categories/{id}"
@page "/categories/{id}/pages/{pageNumber:int}"
@inherits BaseCategoryPage
@inject AcBlog.SDK.Filters.PostCategoryFilter Categories

<div class="container">
    <div class="d-flex flex-row justify-content-between">
        <h1>Category: @Category?.Name</h1>
        <AuthorizeView>
            <Authorized>
                <div class="btn-group-toggle btn-group-lg btn-group my-auto" role="group">
                    <a class="btn btn-primary mdi mdi-square-edit-outline" href="categories/@Id/edit">Edit</a>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>

    <Loader OnLoad="@OnLoad" @ref="loader">
        <PagingWaterfall Data="@Data" Column="1" OnUpdatePage="@OnUpdatePage" OnPageTo="@OnPageTo" PageNavigationUrl="@PageNavigationUrl">
            <ItemTemplate>
                <PostCard Id="@context" ShowType="true"></PostCard>
            </ItemTemplate>
        </PagingWaterfall>
    </Loader>
</div>

@code {
    const int CountPerPage = 10;

    QueryResponse<string> Data { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public int? PageNumber { get; set; } = null;

    private Category Category;

    private Loader loader;

    private string PageNavigationUrl;

    private async Task OnLoad()
    {
        Title = "Loading...";
        PageNavigationUrl = $"/categories/{Id}";
        Category = await Service.CategoryService.Get(Id);
        Data = await Categories.Filter(Id, new Data.Models.Actions.Pagination
        {
            PageNumber = PageNumber ?? 0,
            CountPerPage = CountPerPage
        });
        Title = $"Page {Data.CurrentPage.PageNumber + 1} - {Category.Name}";
    }

    private async Task OnPageTo(int pageNumber)
    {
        PageNumber = pageNumber;
        await OnUpdatePage();
    }

    private async Task OnUpdatePage() => await loader.Load();
}
