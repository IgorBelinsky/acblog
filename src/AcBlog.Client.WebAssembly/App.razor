@inject IJSRuntime JSRuntime
@inject IdentityProvider IdentityProvider
@inject RenderStatus RenderStatus

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <AcBlog.UI.Components.Loading.Loading />
                </Authorizing>
                <NotAuthorized>
                    @if (RenderStatus.IsPrerender)
                    {
                        <AcBlog.UI.Components.Loading.Loading />
                    }
                    else
                    {
                        @if (!context.User.Identity.IsAuthenticated)
                        {
                            <RedirectTo Target="authentication/login" HasReturnUrl="true" />
                        }
                        else
                        {
                            <p>
                                You are not authorized to access
                                this resource.
                            </p>
                        }
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

<AntContainer />

@code{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await LoadingInfoInterop.Hide(JSRuntime);
        await base.OnAfterRenderAsync(firstRender);
    }
}