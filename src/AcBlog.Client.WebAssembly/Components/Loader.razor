@using AcBlog.UI.Components.Loading
@inject ILogger<Loader> Logger
@inject NotificationService NotificationService

@switch (State)
{
    case DataLoadingState.Loading:
        @if (UseSpin)
        {
            <div class="spinner-border spinner-border-sm" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else
        {
            <Loading></Loading>
        }
        break;
    case DataLoadingState.Success:
        @ChildContent
        break;
    case DataLoadingState.Failed:
        <LoadFailingAlert OnReload="@Load"></LoadFailingAlert>
        break;
}

@code {
    [Parameter]
    public bool UseSpin { get; set; } = false;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback OnLoad { get; set; }

    [Parameter]
    public EventCallback OnLoaded { get; set; }

    public DataLoadingState State { get; private set; }

    private bool NeedCallback { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await Load();
        await base.OnInitializedAsync();
    }

    public async Task Load()
    {
        State = DataLoadingState.Loading;
        try
        {
            await OnLoad.InvokeAsync(null);
            State = DataLoadingState.Success;
            NeedCallback = true;
        }
        catch (Exception ex)
        {
            Logger.Log(LogLevel.Error, ex, "Loading failed");
            await NotificationService.Error(new NotificationConfig
            {
                Message = "Loading failed",
            });
            State = DataLoadingState.Failed;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (NeedCallback && State == DataLoadingState.Success)
        {
            NeedCallback = false;
            await OnLoaded.InvokeAsync(null);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
