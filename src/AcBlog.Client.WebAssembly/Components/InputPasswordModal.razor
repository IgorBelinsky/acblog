@inject IJSRuntime JSRuntime

<div class="modal fade" id="@PasswordModalId" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="passwordModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="passwordModalLabel">Input password</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="inputPassword" class="col-form-label">Password:</label>
                        <input type="password" class="form-control @(string.IsNullOrEmpty(PasswordInputMessage) ? "" : "is-invalid")" id="inputPassword" @bind-value="Password" required>
                        <div class="invalid-feedback">
                            @PasswordInputMessage
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="@OnSubmit">Submit</button>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public string PasswordModalId { get; set; } = Guid.NewGuid().ToString();

    [Parameter]
    public EventCallback<string> OnPasswordSubmit { get; set; }

    private string Password { get; set; } = "";

    private string PasswordInputMessage { get; set; } = "";

    public async ValueTask Show()
    {
        // return ModalInterop.Show(JSRuntime, PasswordModalId);
    }

    public async ValueTask Hide()
    {
        // return ModalInterop.Hide(JSRuntime, PasswordModalId);
    }

    public void Refresh()
    {
        Password = "";
        PasswordInputMessage = "";
    }

    private async Task OnSubmit()
    {
        try
        {
            await OnPasswordSubmit.InvokeAsync(Password);
        }
        catch(WrongPasswordException)
        {
            Password = "";
            PasswordInputMessage = "Wrong password.";
        }
    }
}